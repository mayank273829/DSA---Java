//question 1 write the code for Binary serach ?

public class Bs{
public static void main(String[] args){
int [] arr = {1,2,3,4,5};
int target  = 4;
int result = Search(arr, target);
System.out.println(result);
}

public static int Search(int [] arr, int target){
int start = 0;
int end = arr.lngth-1;

while(start <= end){
int mid = start + (end-start)/2;

if(arr[mid] == target){
return mid;
}
else if(arr[mid] < target){
start = mid + 1;
}
else {
end = mid -1;
}
}
return -1;
}
}


// question 2 Find minimum in rotated sorted array

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array



solution - >

class Solution {
    public int findMin(int[] nums) {
        int start = 0;
        int end = nums.length-1;
        while(start < end){
            int mid = start + (end-start)/2;
            
            if(nums[mid] > nums[end]){
                 start = mid + 1;
            }else{
                 end = mid;
            }
        }
        return nums[start];
    }
}


// question 3 Search in rotated sorted array

solution -> 
class Solution {
    public int search(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        int peak = pivot(nums);
        int ans = binarySearch(nums, target, start, peak);
        if(ans != -1){
            return ans;
        }else{
           return binarySearch(nums, target, peak + 1, end);

        }
    }
    public int pivot(int[] nums){
        int start = 0;
        int end = nums.length - 1;
        while(start < end){
            int mid = start + (end - start)/2;
            if(mid < end && nums[mid] > nums[mid + 1]){
                return mid;
            }if(mid > start && nums[mid] < nums[mid - 1]){
                return mid - 1;
            }if(nums[mid] <= nums[start]){
                end = mid - 1;
            }else{
                start = mid + 1;
            }
        }
        return nums.length -1;
    }
    public int binarySearch(int[] nums, int target, int start, int end){
        while(start <= end){
            int mid = start + (end - start)/2;
            if(target == nums[mid]){
                return mid;
            }else if(target < nums[mid]){
                end = mid - 1;
            }else{
                start = mid + 1;
            }
        }
        return -1;
    }
}
